# -*- coding: utf-8 -*-
from config import *


@bot.message_handler(func=lambda message: message.text == 'ü§©–ö–∞—Ç–∞–ª–æ–≥ü§©')
def catalog(message):
    MyLoger.debug(f'message.from_user.id={message.from_user.id}|message.from_user.first_name={message.from_user.first_name}|message.from_user.username={message.from_user.username}')
    keyboard = types.InlineKeyboardMarkup()
    conn = sqlite3.connect(db_name)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM article WHERE availability NOT IN (0)")
    article = cursor.fetchall()
    for element in article:
        index1 = element[0].find('¬´')
        index2 = element[0].find('¬ª')
        but = types.InlineKeyboardButton(text=element[0], callback_data=f'element{element[0][index1+1:index2]}')
        keyboard.add(but)
    # –¢—É—Ç –º–∞—î –±—É—Ç–∏ —ñ–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    keyboard.add(main_menu_inline_button)
    conn.commit()
    cursor.close()
    conn.close()
    bot.send_message(message.from_user.id, "–°—Ç–∏–∫–µ—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏:", reply_markup=keyboard)


@bot.message_handler(func=lambda message: message.text == 'üõí–ö–æ—Ä–∑–∏–Ω–∞üõí')
def basket(message):
    MyLoger.debug(f'message.from_user.id={message.from_user.id}|message.from_user.first_name={message.from_user.first_name}|message.from_user.username={message.from_user.username}')
    conn = sqlite3.connect(db_name)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM basket WHERE user_id = ?", (message.from_user.id,))
    article = cursor.fetchall()
    string = '–ö–æ—Ä–∑–∏–Ω–∞:'
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    if article:
        for el in article:
            string += f'\n–¢–æ–≤–∞—Ä {el[1]}\n C–µ—Ç: {el[2]} —Å—Ç–∏–∫–µ—Ä–æ–≤\n –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–æ–≤: {el[3]}'
        button_order = types.InlineKeyboardButton('üíå–û—Ñ–æ—Ä–º–∏—Ç—åüíå', callback_data='–û—Ñ–æ—Ä–º–∏—Ç—å')
        button_edit = types.InlineKeyboardButton('‚úèÔ∏è–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å‚úèÔ∏è', callback_data='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å')
        button_clean = types.InlineKeyboardButton('üóë–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—Éüóë', callback_data='–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É')
        keyboard.add(button_order, button_edit, button_clean)
    else:
        string += '\n–ü—É—Å—Ç–∞—è'
        keyboard.add(catalog_inline_button)
    keyboard.add(main_menu_inline_button)
    bot.send_message(message.from_user.id, string, reply_markup=keyboard)
    cursor.execute("SELECT * FROM orders WHERE user_id = ?", (message.from_user.id,))
    result = cursor.fetchone()
    if not result:
        cursor.execute("INSERT INTO orders VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
                       (message.from_user.id, None, None, None, None, None, None, None))
    conn.commit()
    cursor.close()
    conn.close()


# InlineButton –°—Ç–∏–∫–µ—Ä–ø–∞–∫ "–ù–∞ –Ω–∞ –Ω–∞"
@bot.callback_query_handler(func=lambda message: 'element' in message.data)
def show_article(message):
    MyLoger.debug(f'message.from_user.id={message.from_user.id}|message.from_user.first_name={message.from_user.first_name}|message.from_user.username={message.from_user.username}')
    try:
        query = str('SELECT * FROM article WHERE name LIKE \'%' + message.data[7:] + '%\'')
        conn = sqlite3.connect(db_name)
        cursor = conn.cursor()
        cursor.execute(query)
        article = cursor.fetchone()
        index1 = article[0].find('¬´')
        index2 = article[0].find('¬ª')
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        article_price = article[4]
        while article_price.find('–≥—Ä–Ω') != -1:
            index = article_price.find('–≥—Ä–Ω')
            price = article_price[:index + 3]
            price = price.replace('\n', '')
            article_price = article_price[index + 3:]
            button = types.InlineKeyboardButton(text=f'üéÅ–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É {price}',
                                                callback_data=f'basket_{price}_{article[0][index1 + 1:index2]}')
            keyboard.add(button)
        back = types.InlineKeyboardButton(text='üëà–ù–∞–∑–∞–¥üëà', callback_data='–ù–∞–∑–∞–¥')
        sum = 0
        cursor.execute("SELECT price FROM basket WHERE user_id = ?", (message.from_user.id,))
        result = cursor.fetchall()
        for el in result:
            sum += int(el[0])
        order = types.InlineKeyboardButton(text=f'üõí–í –ö–æ—Ä–∑–∏–Ω—É. –ó–∞–∫–∞–∑ –Ω–∞ {sum} –≥—Ä–Ω', callback_data='OpenBasket')
        keyboard.add(order, back)
        try:
            bot.delete_message(message.message.chat.id, message.message.message_id)
        except:
            MyLoger.error(f"Error delete message! message.from_user.id={message.from_user.id}")
        bot.send_photo(message.message.chat.id, photo=article[2], caption=f'{article[0]}\n{article[1]}',
                       reply_markup=keyboard)
        conn.commit()
        cursor.close()
        conn.close()
    except:
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(catalog_inline_button)
        bot.delete_message(message.message.chat.id, message.message.message_id)
        bot.send_message(message.from_user.id, '–£–ø—Å. –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ—Ö–æ–∂–µ –≤—ã –ø—ã—Ç–∞–ª–∏—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ –∫–æ—Ç–æ—Ä–æ–≥–æ —É–∂–µ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏ü§™', reply_markup=keyboard)


# - InlineButton '–ù–∞–∑–∞–¥' –≤ –ö–∞—Ç–∞–ª–æ–≥ + InlineButton –ö–∞—Ç–∞–ª–æ–≥
@bot.callback_query_handler(func=lambda message: message.data == '–ù–∞–∑–∞–¥' or message.data == '–ö–∞—Ç–∞–ª–æ–≥')
def catalog_back(message):
    MyLoger.debug(f'message.from_user.id={message.from_user.id}|message.from_user.first_name={message.from_user.first_name}|message.from_user.username={message.from_user.username}')
    try:
        bot.delete_message(message.message.chat.id, message.message.message_id)
    except:
        MyLoger.error(f"Error delete message! message.from_user.id={message.from_user.id}")
    catalog(message)


# InlineButton add new item in basket (–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É N —à—Ç - M –≥—Ä–Ω)
@bot.callback_query_handler(func=lambda message: 'basket' in message.data)
def add_new_item_basket(message):
    MyLoger.debug(f'message.from_user.id={message.from_user.id}|message.from_user.first_name={message.from_user.first_name}|message.from_user.username={message.from_user.username}')
    index = message.data.rfind('_')
    article_name = message.data[index + 1:]
    index = message.data.find('_')
    index2 = message.data.rfind('_')
    price = message.data[index + 1:index2]
    index = price.find('—à—Ç')
    pack_size = price[:index - 1]
    index = price.find('-')
    index2 = price.find('–≥—Ä–Ω')
    price = price[index + 2:index2 - 1]
    amount = 1
    conn = sqlite3.connect(db_name)
    cursor = conn.cursor()
    query = str('SELECT name FROM article WHERE name LIKE \'%' + article_name + '%\'')
    cursor.execute(query)
    full_article_name = cursor.fetchone()
    cursor.execute("SELECT amount FROM basket WHERE user_id=? and article_name=? and pack_size=?",
                   (message.from_user.id, article_name, pack_size))
    result = cursor.fetchone()
    if result:
        cursor.execute("UPDATE basket SET amount=? WHERE user_id=? and article_name=? and pack_size=?",
                       (int(result[0]) + 1, message.from_user.id, article_name, pack_size))
    else:
        cursor.execute("INSERT INTO basket VALUES (?, ?, ?, ?, ?)",
                       (message.from_user.id, article_name, pack_size, amount, price))
    try:
        bot.delete_message(message.message.chat.id, message.message.message_id)
    except:
        MyLoger.error(f"Error delete message! message.from_user.id={message.from_user.id}")
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    button1 = telebot.types.InlineKeyboardButton('‚úÖ–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑‚úÖ', callback_data='OpenBasket')
    button2 = telebot.types.InlineKeyboardButton('üëà–í–µ—Ä–Ω—É—Ç—Å—è –≤ –ö–∞—Ç–∞–ª–æ–≥üëà', callback_data='–ù–∞–∑–∞–¥')
    markup.add(button1, button2)
    bot.send_message(message.from_user.id,
                     f"–¢–æ–≤–∞—Ä {full_article_name[0]} (—Å–µ—Ç –∏–∑ {pack_size} —Å—Ç–∏–∫–µ—Ä–æ–≤) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!",
                     reply_markup=markup)
    conn.commit()
    cursor.close()
    conn.close()


# InlineButton –í –∫–æ—Ä–∑–∏–Ω—É. –∑–∞–∫–∞–∑ –Ω–∞ –• –≥—Ä–Ω + InlineButton –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
@bot.callback_query_handler(func=lambda message: message.data == 'OpenBasket')
def open_basket(message):
    MyLoger.debug(f'message.from_user.id={message.from_user.id}|message.from_user.first_name={message.from_user.first_name}|message.from_user.username={message.from_user.username}')
    try:
        bot.delete_message(message.message.chat.id, message.message.message_id)
    except:
        MyLoger.error(f"Error delete message! message.from_user.id={message.from_user.id}")
    basket(message)

