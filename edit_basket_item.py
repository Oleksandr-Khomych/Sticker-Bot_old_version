# -*- coding: utf-8 -*-
from config import *
from catalog_logic import basket
import myUUID


# InlineButton –û—Ñ–æ—Ä–º–∏—Ç—å –≤ –ö–æ—Ä–∑–∏–Ω–µ
@bot.callback_query_handler(func=lambda message: message.data == '–û—Ñ–æ—Ä–º–∏—Ç—å')
def make_out(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton('üöö–ù–æ–≤–∞—è –ü–æ—á—Ç–∞üöö')
    button2 = types.KeyboardButton('üöö–£–∫—Ä –ü–æ—á—Ç–∞üöö')
    button3 = types.KeyboardButton('‚ùå–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑‚ùå')
    keyboard.row(button1, button2)
    keyboard.row(button3)
    try:
        bot.delete_message(message.message.chat.id, message.message.message_id)
    except:
        MyLoger.error(f"Error delete message! message.from_user.id={message.from_user.id}")
    bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:', reply_markup=keyboard)
    conn = sqlite3.connect(db_name)
    cursor = conn.cursor()
    cursor.execute("UPDATE orders SET order_in_process = ? WHERE user_id = ?", ('True', message.from_user.id,))
    while True:
        order_id = myUUID.get_id()
        cursor.execute("SELECT * FROM orders WHERE order_id = ?", (order_id,))
        result = cursor.fetchall()
        if not result:
            cursor.execute("UPDATE orders SET order_id = ? WHERE user_id = ?", (order_id, message.from_user.id))
            break
    conn.commit()
    cursor.close()
    conn.close()


@bot.callback_query_handler(func=lambda message: message.data == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å')
def edit_basket(message):
    MyLoger.debug(f'message.from_user.id={message.from_user.id}|message.from_user.first_name={message.from_user.first_name}|message.from_user.username={message.from_user.username}')
    conn = sqlite3.connect(db_name)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM basket WHERE user_id= ?", (message.from_user.id,))
    result = cursor.fetchall()

    keyboard = types.InlineKeyboardMarkup()
    for el in result:
        button = types.InlineKeyboardButton(f'–°—Ç–∏–∫–µ—Ä–ø–∞–∫ {el[1]} —Å–µ—Ç {el[2]} –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {el[3]}',
                                            callback_data=f'edit_{el[1]}_{el[2]}')
        keyboard.add(button)
    button = types.InlineKeyboardButton('‚úÖ–ì–æ—Ç–æ–≤–æ‚úÖ', callback_data='–ì–æ—Ç–æ–≤–æ')
    keyboard.add(button)
    try:
        bot.delete_message(message.message.chat.id, message.message.message_id)
    except:
        MyLoger.error(f"Error delete message! message.from_user.id={message.from_user.id}")
    bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n', reply_markup=keyboard)
    conn.commit()
    cursor.close()
    conn.close()


# InlineButton –ö–æ–ª–∏ –Ω–∞—Ç–∏—Å–Ω—É–≤ –Ω–∞ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ñ –æ–±—Ä–∞–≤ —Å—Ç—ñ–∫–µ—Ä–ø–∞–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç—É–≤–∞–Ω–Ω—è?
@bot.callback_query_handler(func=lambda message: 'edit_' in message.data or 'plus' in message.data or 'minus' in message.data)
def edit_article(message):
    MyLoger.debug(f'message.from_user.id={message.from_user.id}|message.from_user.first_name={message.from_user.first_name}|message.from_user.username={message.from_user.username}')
    index1 = message.data.find('_')
    index2 = message.data.rfind('_')
    article_name = message.data[index1 + 1:index2]
    pack_size = message.data[index2 + 1:]
    conn = sqlite3.connect(db_name)
    cursor = conn.cursor()
    cursor.execute("SELECT amount FROM basket WHERE user_id= ? AND article_name = ? AND pack_size = ?",
                   (message.from_user.id, article_name, pack_size))
    result = cursor.fetchone()
    amount = int(result[0])
    if 'plus' in message.data:
        amount += 1
        cursor.execute("UPDATE basket SET amount = ?  WHERE user_id = ? AND article_name = ? AND pack_size = ?",
                       (amount, message.from_user.id, article_name, pack_size))
    elif 'minus' in message.data:
        if amount > 1:
            amount -= 1
            cursor.execute("UPDATE basket SET amount = ?  WHERE user_id = ? AND article_name = ? AND pack_size = ?",
                           (amount, message.from_user.id, article_name, pack_size))
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    button1 = types.InlineKeyboardButton('‚ûï', callback_data=f'plus{message.data[4:]}')
    button2 = types.InlineKeyboardButton('‚ûñ', callback_data=f'minus{message.data[4:]}')
    button3 = types.InlineKeyboardButton('‚ùå', callback_data=f'delete{message.data[4:]}')
    button4 = types.InlineKeyboardButton('‚úÖ–ì–æ—Ç–æ–≤–æ‚úÖ', callback_data='–í—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ')
    keyboard.row(button1, button2, button3)
    keyboard.row(button4)
    try:
        bot.delete_message(message.message.chat.id, message.message.message_id)
    except:
        MyLoger.error(f"Error delete message! message.from_user.id={message.from_user.id}")
    bot.send_message(message.from_user.id, f'–°—Ç–∏–∫–µ—Ä–ø–∞–∫ {article_name}\n–†–∞–∑–º–µ—Ä –ø–∞–∫–∞ {pack_size}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ {amount}',
                     reply_markup=keyboard)
    conn.commit()
    cursor.close()
    conn.close()


# InlineButton X - –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç—ñ–∫–µ—Ä–ø–∞–∫—É –∑ –∫–æ—Ä–∑–∏–Ω–∏
@bot.callback_query_handler(func=lambda message: 'delete' in message.data)
def delete_article(message):
    MyLoger.debug(f'message.from_user.id={message.from_user.id}|message.from_user.first_name={message.from_user.first_name}|message.from_user.username={message.from_user.username}')
    index1 = message.data.find('_')
    index2 = message.data.rfind('_')
    article_name = message.data[index1 + 1:index2]
    pack_size = message.data[index2 + 1:]
    conn = sqlite3.connect(db_name)
    cursor = conn.cursor()
    cursor.execute("DELETE FROM basket WHERE user_id = ? AND article_name = ? AND pack_size = ?",
                   (message.from_user.id, article_name, pack_size))
    bot.send_message(message.from_user.id,
                     f'–°—Ç–∏–∫–µ—Ä–ø–∞–∫ {article_name} (—Å–µ—Ç {pack_size}) —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.')
    conn.commit()
    cursor.close()
    conn.close()
    edit_basket(message)


# InlineButton –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
@bot.callback_query_handler(func=lambda message: message.data == '–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É')
def clean_basket(message):
    MyLoger.debug(f'message.from_user.id={message.from_user.id}|message.from_user.first_name={message.from_user.first_name}|message.from_user.username={message.from_user.username}')
    conn = sqlite3.connect(db_name)
    cursor = conn.cursor()
    cursor.execute("DELETE FROM basket WHERE user_id = ?", (message.from_user.id,))
    conn.commit()
    cursor.close()
    conn.close()
    try:
        bot.delete_message(message.message.chat.id, message.message.message_id)
    except:
        MyLoger.error(f"Error delete message! message.from_user.id={message.from_user.id}")
    basket(message)


# InlineButton –ì–æ—Ç–æ–≤–æ(–∫–æ–ª–∏ –∑–∞–∫—ñ–Ω—á—É—î—à —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ —Å—Ç—ñ–∫–µ—Ä–ø–∞–∫–∞) –∑ callback_data = '–í—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ'
@bot.callback_query_handler(func=lambda message: message.data == '–í—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ')
def complete(message):
    MyLoger.debug(f'message.from_user.id={message.from_user.id}|message.from_user.first_name={message.from_user.first_name}|message.from_user.username={message.from_user.username}')
    try:
        bot.delete_message(message.message.chat.id, message.message.message_id)
    except:
        MyLoger.error(f"Error delete message! message.from_user.id={message.from_user.id}")
    basket(message)


# InlineButton –ì–æ—Ç–æ–≤–æ(–∫–æ–ª–∏ –∑–∞–∫—ñ–Ω—á—É—î—à —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∑–∏–Ω–∏) –∑ callback_data = '–ì–æ—Ç–æ–≤–æ'
@bot.callback_query_handler(func=lambda message: message.data == '–ì–æ—Ç–æ–≤–æ')
def complete2(message):
    MyLoger.debug(f'message.from_user.id={message.from_user.id}|message.from_user.first_name={message.from_user.first_name}|message.from_user.username={message.from_user.username}')
    try:
        bot.delete_message(message.message.chat.id, message.message.message_id)
    except:
        MyLoger.error(f"Error delete message! message.from_user.id={message.from_user.id}")
    basket(message)
