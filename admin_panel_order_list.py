# -*- coding: utf-8 -*-
from config import *

# ===============================================================–°–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å


@bot.message_handler(func=lambda message: message.text == '–°–ø–∏—Å–æ–∫ –ó–∞–º–æ–≤–ª–µ–Ω—å' and message.from_user.id in admins_id)
def order_list_admin(message):
    MyLoger.debug(f'message.from_user.id={message.from_user.id}|message.from_user.first_name={message.from_user.first_name}|message.from_user.username={message.from_user.username}')
    keyboard = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton('–í—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', callback_data='all')
    button2 = types.InlineKeyboardButton('–ê–∫—Ç—É–∞–ª—å–Ω—ñ', callback_data='relevant')
    keyboard.add(button1, button2)
    keyboard.add(admin_main_inline_button)
    bot.send_message(message.from_user.id, '–û–±–µ—Ä—ñ—Ç—å —Ñ—ñ–ª—å—Ç—Ä:', reply_markup=keyboard)


@bot.callback_query_handler(func=lambda message: message.data == 'all' and message.from_user.id in admins_id)
def all_orders(message):
    MyLoger.debug(f'message.from_user.id={message.from_user.id}|message.from_user.first_name={message.from_user.first_name}|message.from_user.username={message.from_user.username}')
    conn = sqlite3.connect(db_name)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM order_generated")
    orders_list = cursor.fetchall()
    keyboard = types.InlineKeyboardMarkup()
    string = "–°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å:"
    if orders_list:
        for order in orders_list:
            button = types.InlineKeyboardButton(f'üìå–ó–∞–∫–∞–∑ #{order[1]}. –°—Ç–∞—Ç—É—Å:{order[2]}',
                                                callback_data=f'admin_order#{order[1]}')
            keyboard.add(button)
    else:
        string += '\n–ó–∞–º–æ–≤–ª–µ–Ω—å —â–µ –Ω–µ–º–∞—î'
    button_main = types.InlineKeyboardButton('–ê–¥–º—ñ–Ω –ú–µ–Ω—é', callback_data='–ê–¥–º—ñ–Ω –ú–µ–Ω—é')
    keyboard.add(button_main)
    bot.delete_message(message.message.chat.id, message.message.message_id)
    bot.send_message(message.from_user.id, string, reply_markup=keyboard)
    conn.commit()
    cursor.close()
    conn.close()


@bot.callback_query_handler(func=lambda message: message.data == 'relevant' and message.from_user.id in admins_id)
def relevant_orders(message):
    MyLoger.debug(f'message.from_user.id={message.from_user.id}|message.from_user.first_name={message.from_user.first_name}|message.from_user.username={message.from_user.username}')
    conn = sqlite3.connect(db_name)
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM order_generated WHERE status NOT IN ("–í—ã–ø–æ–ª–Ω–µ–Ω–æ")')
    orders_list = cursor.fetchall()
    keyboard = types.InlineKeyboardMarkup()
    string = "–°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å:"
    if orders_list:
        for order in orders_list:
            button = types.InlineKeyboardButton(f'üìå–ó–∞–∫–∞–∑ #{order[1]}. –°—Ç–∞—Ç—É—Å:{order[2]}',
                                                callback_data=f'admin_order#{order[1]}')
            keyboard.add(button)
    else:
        string += '\n–ó–∞–º–æ–≤–ª–µ–Ω—å —â–µ –Ω–µ–º–∞—î'
    button_main = types.InlineKeyboardButton('–ê–¥–º—ñ–Ω –ú–µ–Ω—é', callback_data='–ê–¥–º—ñ–Ω –ú–µ–Ω—é')
    keyboard.add(button_main)
    bot.delete_message(message.message.chat.id, message.message.message_id)
    bot.send_message(message.from_user.id, string, reply_markup=keyboard)
    conn.commit()
    cursor.close()
    conn.close()


@bot.callback_query_handler(func=lambda message: message.data == '–°–ø–∏—Å–æ–∫ –ó–∞–º–æ–≤–ª–µ–Ω—å' and message.from_user.id in admins_id)
def order_list_admin_callback(message):
    MyLoger.debug(f'message.from_user.id={message.from_user.id}|message.from_user.first_name={message.from_user.first_name}|message.from_user.username={message.from_user.username}')
    try:
        bot.delete_message(message.message.chat.id, message.message.message_id)
    except:
        MyLoger.error(f"Error delete message! message.from_user.id={message.from_user.id}")
    order_list_admin(message)


@bot.callback_query_handler(func=lambda message: 'admin_order#' in message.data and message.from_user.id in admins_id)
def show_order_admin(message):
    MyLoger.debug(f'message.from_user.id={message.from_user.id}|message.from_user.first_name={message.from_user.first_name}|message.from_user.username={message.from_user.username}')
    conn = sqlite3.connect(db_name)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM order_generated WHERE order_id = ?", (message.data[12:],))
    order = cursor.fetchone()
    delivery_type = 'Error #687'
    if order[5] == '–ù–æ–≤–∞—è –ü–æ—á—Ç–∞':
        delivery_type = '–û—Ç–¥–µ–ª–µ–Ω–∏–µ –ù–æ–≤–æ–π –ø–æ—á—Ç—ã: '
    elif order[5] == '–£–∫—Ä –ü–æ—á—Ç–∞':
        delivery_type = '–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å:'
    text = f'üìå–ó–∞–∫–∞–∑ ‚Ññ{order[1]}\n–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {order[2]}\n–¢–¢–ù: {order[3]}\nüí°–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n{order[4]}\n üöö–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏: {order[5]}\nüèô–ì–æ—Ä–æ–¥ : {order[6]}\nüè¢{delivery_type}{order[7]}\nüë§–ü–æ–ª–Ω–æ–µ –∏–º—è: {order[8]}\nüì±–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {order[9]}'
    keyboard = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton('–û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', callback_data=f'update_status#{order[1]}')
    button2 = types.InlineKeyboardButton('–û–Ω–æ–≤–∏—Ç–∏ –¢–¢–ù', callback_data=f'update_TTH#{order[1]}')
    button3 = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='–°–ø–∏—Å–æ–∫ –ó–∞–º–æ–≤–ª–µ–Ω—å')
    keyboard.add(button1, button2, button3)
    try:
        bot.delete_message(message.message.chat.id, message.message.message_id)
    except:
        MyLoger.error(f"Error delete message! message.from_user.id={message.from_user.id}")
    bot.send_message(message.from_user.id, text, reply_markup=keyboard)
    conn.commit()
    cursor.close()
    conn.close()


@bot.callback_query_handler(func=lambda message: 'update_status#' in message.data and message.from_user.id in admins_id)
def update_status_order(message):
    MyLoger.debug(f'message.from_user.id={message.from_user.id}|message.from_user.first_name={message.from_user.first_name}|message.from_user.username={message.from_user.username}')
    index = message.data.find("#")
    order_number = message.data[index+1:]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    button1 = types.InlineKeyboardButton('–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç. –û–∂–∏–¥–∞–π—Ç–µ –¢–¢–ù', callback_data=f'setStatus_–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç#{order_number}')
    button2 = types.InlineKeyboardButton('–í –ø—Ä–æ—Ü–µ—Å–µ –¥–æ—Å—Ç–∞–≤–∫–∏', callback_data=f'setStatus_–í –ø—Ä–æ—Ü–µ—Å–µ –¥–æ—Å—Ç–∞–≤–∫–∏#{order_number}')
    button3 = types.InlineKeyboardButton('–í—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data=f'setStatus_–í—ã–ø–æ–ª–Ω–µ–Ω–æ#{order_number}')
    button4 = types.InlineKeyboardButton('–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ', callback_data=f'setStatus_–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ#{order_number}')
    button5 = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='–°–ø–∏—Å–æ–∫ –ó–∞–º–æ–≤–ª–µ–Ω—å')
    keyboard.add(button1, button2, button3, button4, button5)
    try:
        bot.delete_message(message.message.chat.id, message.message.message_id)
    except:
        MyLoger.error(f"Error delete message! message.from_user.id={message.from_user.id}")
    bot.send_message(message.from_user.id, f'üìå–í–∏–±–µ—Ä—ñ—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_number}:', reply_markup=keyboard)


@bot.callback_query_handler(func=lambda message: 'setStatus_' in message.data and message.from_user.id in admins_id)
def set_status_order(message):
    MyLoger.debug(f'message.from_user.id={message.from_user.id}|message.from_user.first_name={message.from_user.first_name}|message.from_user.username={message.from_user.username}')
    print(f'message.data = {message.data}')
    index1 = message.data.find('_')
    index2 = message.data.find('#')
    status = message.data[index1+1:index2]
    order_id = message.data[index2+1:]
    print(f'status={status}')
    print(f'order_id={order_id}')
    global update_order_status
    update_order_status = [status, order_id]
    try:
        bot.delete_message(message.message.chat.id, message.message.message_id)
    except:
        MyLoger.error(f"Error delete message! message.from_user.id={message.from_user.id}")
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    button1 = types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä', callback_data='comment_true')
    button2 = types.InlineKeyboardButton('–ù–µ –¥–æ–±–∞–≤–ª—è—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä', callback_data='comment_false')
    button3 = types.InlineKeyboardButton('–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ —Ä–µ–¥–∞–∫—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É', callback_data='comment_cancel')
    keyboard.add(button1, button2, button3)
    bot.send_message(message.from_user.id, '–ë–∞–∂–∞—î—Ç–µ –¥–æ–±–∞–≤–∏—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä –∑ –ø–æ—è—Å–Ω–µ–Ω–Ω—è–º –¥–æ —Å—Ç–∞—Ç—É—Å—É?',
                     reply_markup=keyboard)


@bot.callback_query_handler(func=lambda message: 'comment_' in message.data and message.from_user.id in admins_id)
def add_comment(message):
    MyLoger.debug(
        f'message.from_user.id={message.from_user.id}|message.from_user.first_name={message.from_user.first_name}|message.from_user.username={message.from_user.username}')
    index1 = message.data.find('_')
    action = message.data[index1+1:]
    conn = sqlite3.connect(db_name)
    cursor = conn.cursor()
    try:
        global update_order_status
        status, order_id = update_order_status
        if action == 'cancel':
            bot.send_message(message.from_user.id,
                             f'–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}. –í–∞—Å –±—É–¥–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –°–ø–∏—Å–æ–∫ –ó–∞–º–æ–≤–ª–µ–Ω—å')
            order_list_admin(message)
            update_order_status = False
        elif action == 'false':
            cursor.execute("UPDATE order_generated SET status = ? WHERE order_id = ?", (status, order_id))
            bot.send_message(message.from_user.id, f'–î–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å: {status}')
            cursor.execute("SELECT user_id FROM order_generated WHERE order_id = ?", (order_id,))
            result = cursor.fetchone()
            user_id = result[0]
            bot.send_message(user_id, f'–í –∑–∞–∫–∞–∑–µ #{order_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç—É—Å: {status}')
            update_order_status = False
        elif action == 'true':
            bot.send_message(message.from_user.id, f'–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}:')
        bot.delete_message(message.message.chat.id, message.message.message_id)
    except:
        MyLoger.error(f"Error update order status! message.from_user.id={message.from_user.id}")
        update_order_status = False
        bot.send_message(message.from_user.id, '–í—ñ–¥–±—É–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –í–∞—Å –±—É–¥–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –°–ø–∏—Å–æ–∫ –ó–∞–º–æ–≤–ª–µ–Ω—å')
        bot.delete_message(message.message.chat.id, message.message.message_id)
        order_list_admin(message)


    conn.commit()
    cursor.close()
    conn.close()


@bot.message_handler(func=lambda message: update_order_status and message.from_user.id in admins_id, content_types=['text'])
def comment(message):
    MyLoger.debug(
        f'message.from_user.id={message.from_user.id}|message.from_user.first_name={message.from_user.first_name}|message.from_user.username={message.from_user.username}')
    conn = sqlite3.connect(db_name)
    cursor = conn.cursor()
    admin_comment = message.text
    global update_order_status
    status, order_id = update_order_status
    update_order_status = False
    #
    cursor.execute("UPDATE order_generated SET status = ? WHERE order_id = ?", (status, order_id))
    bot.send_message(message.from_user.id, f'–î–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å: {status}. –¢–∞–∫–æ–∂ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫–æ–º–µ–Ω—Ç–∞—Ä: {admin_comment}')
    cursor.execute("SELECT user_id FROM order_generated WHERE order_id = ?", (order_id,))
    result = cursor.fetchone()
    user_id = result[0]
    bot.send_message(user_id, f'–í –∑–∞–∫–∞–∑–µ #{order_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç—É—Å: {status}.\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {admin_comment}')
    conn.commit()
    cursor.close()
    conn.close()



@bot.callback_query_handler(func=lambda message: 'update_TTH#' in message.data and message.from_user.id in admins_id)
def update_tth(message):
    MyLoger.debug(f'message.from_user.id={message.from_user.id}|message.from_user.first_name={message.from_user.first_name}|message.from_user.username={message.from_user.username}')
    index_status = message.data.find("#")
    order_number = message.data[index_status + 1:]
    global new_TTH
    new_TTH = order_number
    try:
        bot.delete_message(message.message.chat.id, message.message.message_id)
    except:
        MyLoger.error(f"Error delete message! message.from_user.id={message.from_user.id}")
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button = types.KeyboardButton('–°–∫–∞—Å—É–≤–∞—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¢–¢–ù')
    keyboard.add(button)
    bot.send_message(message.from_user.id, f'–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –¢–¢–ù –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_number}', reply_markup=keyboard)


@bot.message_handler(func=lambda message: message.text == '–°–∫–∞—Å—É–≤–∞—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¢–¢–ù' and message.from_user.id in admins_id)
def cancel_update_tth(message):
    MyLoger.debug(f'message.from_user.id={message.from_user.id}|message.from_user.first_name={message.from_user.first_name}|message.from_user.username={message.from_user.username}')
    global new_TTH
    new_TTH = False
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(admin_edit_catalog_button, admin_order_list_button, admin_distribution_button)
    bot.send_message(message.from_user.id, '–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–ª—è –¢–¢–ù —Å–∫–∞—Å–æ–≤–∞–Ω–æ.', reply_markup=keyboard)


@bot.message_handler(func=lambda message: message.from_user.id in admins_id and new_TTH)
def set_new_tth(message):
    MyLoger.debug(f'message.from_user.id={message.from_user.id}|message.from_user.first_name={message.from_user.first_name}|message.from_user.username={message.from_user.username}')
    TTH = message.text
    global new_TTH
    conn = sqlite3.connect(db_name)
    cursor = conn.cursor()
    cursor.execute("UPDATE order_generated SET TTH = ? WHERE order_id = ?", (TTH, new_TTH))
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(admin_edit_catalog_button, admin_order_list_button, admin_distribution_button)
    cursor.execute("UPDATE order_generated SET status = ? WHERE order_id = ?", ('–í –ø—Ä–æ—Ü–µ—Å–µ –¥–æ—Å—Ç–∞–≤–∫–∏', new_TTH))
    cursor.execute("SELECT user_id FROM order_generated WHERE order_id = ?", (new_TTH,))
    user_id = cursor.fetchone()
    bot.send_message(user_id[0], f'–í –∑–∞–∫–∞–∑–µ #{new_TTH} –æ–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å: –í –ø—Ä–æ—Ü–µ—Å–µ –¥–æ—Å—Ç–∞–≤–∫–∏')
    bot.send_message(message.from_user.id, f'–ù–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å "–í –ü—Ä–æ—Ü–µ—Å–µ –¥–æ—Å—Ç–∞–≤–∫–∏" —ñ  –Ω–æ–≤–∏–π –¢–¢–ù –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{new_TTH} —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.', reply_markup=keyboard)
    cursor.execute("SELECT user_id FROM order_generated WHERE order_id = ?", (new_TTH,))
    result = cursor.fetchone()
    bot.send_message(result[0], f'–í –∑–∞–∫–∞–∑–µ #{new_TTH} –æ–±–Ω–æ–≤–ª–µ–Ω –¢–¢–ù: {TTH}')
    new_TTH = False
    conn.commit()
    cursor.close()
    conn.close()
